import pandas as pd
import mysql.connector
import re
import asyncio
from aiogram.exceptions import TelegramBadRequest, TelegramNetworkError

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL
DB_HOST = "78.40.219.237"
DB_PORT = 3306
DB_USER = "gen_user"
DB_PASSWORD = "nS5zN{|,Pw*)zC"

BATCH_SIZE = 500  # –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è executemany()
CHUNK_SIZE = 5000  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –æ–¥–Ω–æ–º —á–∞–Ω–∫–µ
RETRY_ATTEMPTS = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è


def clean_column_name(name):
    """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫, –∑–∞–º–µ–Ω—è—è –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ _"""
    if not isinstance(name, str) or not name.strip():
        return None
    name = re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø0-9_]', '_', name).strip('_')
    return name


async def execute_with_retry(query, data, db_name):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ —Å–±–æ—è—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    for attempt in range(RETRY_ATTEMPTS):
        try:
            with mysql.connector.connect(
                host=DB_HOST, port=DB_PORT, user=DB_USER, password=DB_PASSWORD, database=db_name,
                connection_timeout=600
            ) as conn:
                with conn.cursor() as cursor:
                    for batch_start in range(0, len(data), BATCH_SIZE):
                        batch_end = batch_start + BATCH_SIZE
                        cursor.executemany(query, data[batch_start:batch_end])
                        conn.commit()
            return
        except mysql.connector.Error as e:
            print(f"–û—à–∏–±–∫–∞ MySQL: {e}")
            if attempt < RETRY_ATTEMPTS - 1:
                print("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                await asyncio.sleep(2)
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")


async def load_excel_to_mysql(db_name, table_name, file_paths, column_types, progress_message, clear_table=True):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö Excel-—Ñ–∞–π–ª–æ–≤ –≤ MySQL"""
    dataframes = []
    for file_path in file_paths:
        try:
            df = pd.read_excel(file_path, engine="openpyxl")
            df.columns = [clean_column_name(col) for col in df.columns]
            df = df.loc[:, df.columns.notnull()]
            dataframes.append(df)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return

    combined_df = pd.concat(dataframes, ignore_index=True)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–æ–ª–æ–Ω–æ–∫
    seen = {}
    final_columns = []
    for col in combined_df.columns:
        if col in seen:
            seen[col] += 1
            new_col = f"{col}_{seen[col]}"
        else:
            seen[col] = 0
            new_col = col
        final_columns.append(new_col)
    combined_df.columns = final_columns

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MySQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ë–î –∏ —Ç–∞–±–ª–∏—Ü—ã
    with mysql.connector.connect(
        host=DB_HOST, port=DB_PORT, user=DB_USER, password=DB_PASSWORD,
        connection_timeout=600
    ) as conn:
        with conn.cursor() as cursor:
            conn.autocommit = False
            cursor.execute(f"CREATE DATABASE IF NOT EXISTS {db_name} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci")
            cursor.execute(f"USE {db_name}")

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            sql_columns = []
            for col in final_columns:
                col_type = "TEXT"
                if column_types:
                    for sql_type, cols in column_types.items():
                        if col in cols:
                            col_type = sql_type
                            break
                sql_columns.append(f"{col} {col_type}")

            cursor.execute(f"""
                CREATE TABLE IF NOT EXISTS {table_name} (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    {', '.join(sql_columns)}
                ) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci
            """)

            # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if clear_table:
                cursor.execute(f"DELETE FROM {table_name}")
                conn.commit()

    total_rows = len(combined_df)
    if total_rows == 0:
        if progress_message:
            await safe_edit_text(progress_message, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ üö´")
        return

    update_step = max(1, total_rows // 20)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ 5% –∑–∞–≥—Ä—É–∑–∫–∏
    progress = 0

    # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–∞–Ω–∫–∞–º–∏ —Å –Ω–æ–≤—ã–º–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
    placeholders = ", ".join(["%s"] * len(final_columns))
    sql_insert = f"INSERT INTO {table_name} ({', '.join(final_columns)}) VALUES ({placeholders})"

    for start in range(0, total_rows, CHUNK_SIZE):
        end = min(start + CHUNK_SIZE, total_rows)
        chunk = combined_df.iloc[start:end]

        batch_data = [tuple(row.where(pd.notna(row), None)) for _, row in chunk.iterrows()]
        await execute_with_retry(sql_insert, batch_data, db_name)

        new_progress = round((end) / total_rows * 100)
        if new_progress % 5 == 0 and new_progress > progress:
            progress = new_progress
            if progress_message:
                await safe_edit_text(progress_message, f"{progress}%")

    if progress_message:
        await safe_edit_text(progress_message, "100% ‚Äî –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚úÖ")

    print(f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ {table_name} –∏–∑ {len(file_paths)} —Ñ–∞–π–ª–æ–≤.")


async def safe_edit_text(message, text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ TelegramBadRequest"""
    for _ in range(3):  # –î–æ 3 –ø–æ–ø—ã—Ç–æ–∫
        try:
            await message.edit_text(text)
            break
        except TelegramBadRequest:
            break  # –û—à–∏–±–∫–∞ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        except TelegramNetworkError:
            await asyncio.sleep(1)  # –ñ–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
